/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.amf.registration.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.amf.registration.model.AmfRegistrationLog;
import com.liferay.docs.amf.registration.service.AmfRegistrationLogLocalService;
import com.liferay.docs.amf.registration.service.persistence.AmfRegistrationLogPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the amf registration log local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.docs.amf.registration.service.impl.AmfRegistrationLogLocalServiceImpl}.
 * </p>
 *
 * @author liferay
 * @see com.liferay.docs.amf.registration.service.impl.AmfRegistrationLogLocalServiceImpl
 * @see com.liferay.docs.amf.registration.service.AmfRegistrationLogLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AmfRegistrationLogLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AmfRegistrationLogLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.docs.amf.registration.service.AmfRegistrationLogLocalServiceUtil} to access the amf registration log local service.
	 */

	/**
	 * Adds the amf registration log to the database. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistrationLog the amf registration log
	 * @return the amf registration log that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AmfRegistrationLog addAmfRegistrationLog(
		AmfRegistrationLog amfRegistrationLog) {
		amfRegistrationLog.setNew(true);

		return amfRegistrationLogPersistence.update(amfRegistrationLog);
	}

	/**
	 * Creates a new amf registration log with the primary key. Does not add the amf registration log to the database.
	 *
	 * @param logId the primary key for the new amf registration log
	 * @return the new amf registration log
	 */
	@Override
	public AmfRegistrationLog createAmfRegistrationLog(long logId) {
		return amfRegistrationLogPersistence.create(logId);
	}

	/**
	 * Deletes the amf registration log with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param logId the primary key of the amf registration log
	 * @return the amf registration log that was removed
	 * @throws PortalException if a amf registration log with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AmfRegistrationLog deleteAmfRegistrationLog(long logId)
		throws PortalException {
		return amfRegistrationLogPersistence.remove(logId);
	}

	/**
	 * Deletes the amf registration log from the database. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistrationLog the amf registration log
	 * @return the amf registration log that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AmfRegistrationLog deleteAmfRegistrationLog(
		AmfRegistrationLog amfRegistrationLog) {
		return amfRegistrationLogPersistence.remove(amfRegistrationLog);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AmfRegistrationLog.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return amfRegistrationLogPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.model.impl.AmfRegistrationLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return amfRegistrationLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.model.impl.AmfRegistrationLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return amfRegistrationLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return amfRegistrationLogPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return amfRegistrationLogPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AmfRegistrationLog fetchAmfRegistrationLog(long logId) {
		return amfRegistrationLogPersistence.fetchByPrimaryKey(logId);
	}

	/**
	 * Returns the amf registration log with the primary key.
	 *
	 * @param logId the primary key of the amf registration log
	 * @return the amf registration log
	 * @throws PortalException if a amf registration log with the primary key could not be found
	 */
	@Override
	public AmfRegistrationLog getAmfRegistrationLog(long logId)
		throws PortalException {
		return amfRegistrationLogPersistence.findByPrimaryKey(logId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(amfRegistrationLogLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AmfRegistrationLog.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("logId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(amfRegistrationLogLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AmfRegistrationLog.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("logId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(amfRegistrationLogLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AmfRegistrationLog.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("logId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return amfRegistrationLogLocalService.deleteAmfRegistrationLog((AmfRegistrationLog)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return amfRegistrationLogPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the amf registration logs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.model.impl.AmfRegistrationLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of amf registration logs
	 * @param end the upper bound of the range of amf registration logs (not inclusive)
	 * @return the range of amf registration logs
	 */
	@Override
	public List<AmfRegistrationLog> getAmfRegistrationLogs(int start, int end) {
		return amfRegistrationLogPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of amf registration logs.
	 *
	 * @return the number of amf registration logs
	 */
	@Override
	public int getAmfRegistrationLogsCount() {
		return amfRegistrationLogPersistence.countAll();
	}

	/**
	 * Updates the amf registration log in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistrationLog the amf registration log
	 * @return the amf registration log that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AmfRegistrationLog updateAmfRegistrationLog(
		AmfRegistrationLog amfRegistrationLog) {
		return amfRegistrationLogPersistence.update(amfRegistrationLog);
	}

	/**
	 * Returns the amf registration local service.
	 *
	 * @return the amf registration local service
	 */
	public com.liferay.docs.amf.registration.service.AmfRegistrationLocalService getAmfRegistrationLocalService() {
		return amfRegistrationLocalService;
	}

	/**
	 * Sets the amf registration local service.
	 *
	 * @param amfRegistrationLocalService the amf registration local service
	 */
	public void setAmfRegistrationLocalService(
		com.liferay.docs.amf.registration.service.AmfRegistrationLocalService amfRegistrationLocalService) {
		this.amfRegistrationLocalService = amfRegistrationLocalService;
	}

	/**
	 * Returns the amf registration log local service.
	 *
	 * @return the amf registration log local service
	 */
	public AmfRegistrationLogLocalService getAmfRegistrationLogLocalService() {
		return amfRegistrationLogLocalService;
	}

	/**
	 * Sets the amf registration log local service.
	 *
	 * @param amfRegistrationLogLocalService the amf registration log local service
	 */
	public void setAmfRegistrationLogLocalService(
		AmfRegistrationLogLocalService amfRegistrationLogLocalService) {
		this.amfRegistrationLogLocalService = amfRegistrationLogLocalService;
	}

	/**
	 * Returns the amf registration log persistence.
	 *
	 * @return the amf registration log persistence
	 */
	public AmfRegistrationLogPersistence getAmfRegistrationLogPersistence() {
		return amfRegistrationLogPersistence;
	}

	/**
	 * Sets the amf registration log persistence.
	 *
	 * @param amfRegistrationLogPersistence the amf registration log persistence
	 */
	public void setAmfRegistrationLogPersistence(
		AmfRegistrationLogPersistence amfRegistrationLogPersistence) {
		this.amfRegistrationLogPersistence = amfRegistrationLogPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.docs.amf.registration.model.AmfRegistrationLog",
			amfRegistrationLogLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.docs.amf.registration.model.AmfRegistrationLog");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AmfRegistrationLogLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AmfRegistrationLog.class;
	}

	protected String getModelClassName() {
		return AmfRegistrationLog.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = amfRegistrationLogPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.docs.amf.registration.service.AmfRegistrationLocalService.class)
	protected com.liferay.docs.amf.registration.service.AmfRegistrationLocalService amfRegistrationLocalService;
	@BeanReference(type = AmfRegistrationLogLocalService.class)
	protected AmfRegistrationLogLocalService amfRegistrationLogLocalService;
	@BeanReference(type = AmfRegistrationLogPersistence.class)
	protected AmfRegistrationLogPersistence amfRegistrationLogPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}