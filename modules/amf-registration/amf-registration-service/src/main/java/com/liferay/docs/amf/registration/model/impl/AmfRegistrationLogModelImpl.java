/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.amf.registration.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.amf.registration.model.AmfRegistrationLog;
import com.liferay.docs.amf.registration.model.AmfRegistrationLogModel;
import com.liferay.docs.amf.registration.model.AmfRegistrationLogSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AmfRegistrationLog service. Represents a row in the &quot;AMF_REGISTRATION_LOG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AmfRegistrationLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AmfRegistrationLogImpl}.
 * </p>
 *
 * @author liferay
 * @see AmfRegistrationLogImpl
 * @see AmfRegistrationLog
 * @see AmfRegistrationLogModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AmfRegistrationLogModelImpl extends BaseModelImpl<AmfRegistrationLog>
	implements AmfRegistrationLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amf registration log model instance should use the {@link AmfRegistrationLog} interface instead.
	 */
	public static final String TABLE_NAME = "AMF_REGISTRATION_LOG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "logId", Types.BIGINT },
			{ "dateTime", Types.TIMESTAMP },
			{ "screenName", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "ipAddress", Types.VARCHAR },
			{ "eventType", Types.VARCHAR },
			{ "additionalInfo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("logId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalInfo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table AMF_REGISTRATION_LOG (logId LONG not null primary key,dateTime DATE null,screenName VARCHAR(75) null,userId LONG,ipAddress VARCHAR(75) null,eventType VARCHAR(75) null,additionalInfo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AMF_REGISTRATION_LOG";
	public static final String ORDER_BY_JPQL = " ORDER BY amfRegistrationLog.logId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AMF_REGISTRATION_LOG.logId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.amf.registration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.docs.amf.registration.model.AmfRegistrationLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.amf.registration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.docs.amf.registration.model.AmfRegistrationLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AmfRegistrationLog toModel(AmfRegistrationLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AmfRegistrationLog model = new AmfRegistrationLogImpl();

		model.setLogId(soapModel.getLogId());
		model.setDateTime(soapModel.getDateTime());
		model.setScreenName(soapModel.getScreenName());
		model.setUserId(soapModel.getUserId());
		model.setIpAddress(soapModel.getIpAddress());
		model.setEventType(soapModel.getEventType());
		model.setAdditionalInfo(soapModel.getAdditionalInfo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AmfRegistrationLog> toModels(
		AmfRegistrationLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AmfRegistrationLog> models = new ArrayList<AmfRegistrationLog>(soapModels.length);

		for (AmfRegistrationLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.docs.amf.registration.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.docs.amf.registration.model.AmfRegistrationLog"));

	public AmfRegistrationLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _logId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _logId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AmfRegistrationLog.class;
	}

	@Override
	public String getModelClassName() {
		return AmfRegistrationLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("logId", getLogId());
		attributes.put("dateTime", getDateTime());
		attributes.put("screenName", getScreenName());
		attributes.put("userId", getUserId());
		attributes.put("ipAddress", getIpAddress());
		attributes.put("eventType", getEventType());
		attributes.put("additionalInfo", getAdditionalInfo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long logId = (Long)attributes.get("logId");

		if (logId != null) {
			setLogId(logId);
		}

		Date dateTime = (Date)attributes.get("dateTime");

		if (dateTime != null) {
			setDateTime(dateTime);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String additionalInfo = (String)attributes.get("additionalInfo");

		if (additionalInfo != null) {
			setAdditionalInfo(additionalInfo);
		}
	}

	@JSON
	@Override
	public long getLogId() {
		return _logId;
	}

	@Override
	public void setLogId(long logId) {
		_logId = logId;
	}

	@JSON
	@Override
	public Date getDateTime() {
		return _dateTime;
	}

	@Override
	public void setDateTime(Date dateTime) {
		_dateTime = dateTime;
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return "";
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_eventType = eventType;
	}

	@JSON
	@Override
	public String getAdditionalInfo() {
		if (_additionalInfo == null) {
			return "";
		}
		else {
			return _additionalInfo;
		}
	}

	@Override
	public void setAdditionalInfo(String additionalInfo) {
		_additionalInfo = additionalInfo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AmfRegistrationLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AmfRegistrationLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AmfRegistrationLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AmfRegistrationLogImpl amfRegistrationLogImpl = new AmfRegistrationLogImpl();

		amfRegistrationLogImpl.setLogId(getLogId());
		amfRegistrationLogImpl.setDateTime(getDateTime());
		amfRegistrationLogImpl.setScreenName(getScreenName());
		amfRegistrationLogImpl.setUserId(getUserId());
		amfRegistrationLogImpl.setIpAddress(getIpAddress());
		amfRegistrationLogImpl.setEventType(getEventType());
		amfRegistrationLogImpl.setAdditionalInfo(getAdditionalInfo());

		amfRegistrationLogImpl.resetOriginalValues();

		return amfRegistrationLogImpl;
	}

	@Override
	public int compareTo(AmfRegistrationLog amfRegistrationLog) {
		long primaryKey = amfRegistrationLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AmfRegistrationLog)) {
			return false;
		}

		AmfRegistrationLog amfRegistrationLog = (AmfRegistrationLog)obj;

		long primaryKey = amfRegistrationLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AmfRegistrationLog> toCacheModel() {
		AmfRegistrationLogCacheModel amfRegistrationLogCacheModel = new AmfRegistrationLogCacheModel();

		amfRegistrationLogCacheModel.logId = getLogId();

		Date dateTime = getDateTime();

		if (dateTime != null) {
			amfRegistrationLogCacheModel.dateTime = dateTime.getTime();
		}
		else {
			amfRegistrationLogCacheModel.dateTime = Long.MIN_VALUE;
		}

		amfRegistrationLogCacheModel.screenName = getScreenName();

		String screenName = amfRegistrationLogCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			amfRegistrationLogCacheModel.screenName = null;
		}

		amfRegistrationLogCacheModel.userId = getUserId();

		amfRegistrationLogCacheModel.ipAddress = getIpAddress();

		String ipAddress = amfRegistrationLogCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			amfRegistrationLogCacheModel.ipAddress = null;
		}

		amfRegistrationLogCacheModel.eventType = getEventType();

		String eventType = amfRegistrationLogCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			amfRegistrationLogCacheModel.eventType = null;
		}

		amfRegistrationLogCacheModel.additionalInfo = getAdditionalInfo();

		String additionalInfo = amfRegistrationLogCacheModel.additionalInfo;

		if ((additionalInfo != null) && (additionalInfo.length() == 0)) {
			amfRegistrationLogCacheModel.additionalInfo = null;
		}

		return amfRegistrationLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{logId=");
		sb.append(getLogId());
		sb.append(", dateTime=");
		sb.append(getDateTime());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", additionalInfo=");
		sb.append(getAdditionalInfo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.docs.amf.registration.model.AmfRegistrationLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>logId</column-name><column-value><![CDATA[");
		sb.append(getLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateTime</column-name><column-value><![CDATA[");
		sb.append(getDateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInfo</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInfo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AmfRegistrationLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AmfRegistrationLog.class
		};
	private long _logId;
	private Date _dateTime;
	private String _screenName;
	private long _userId;
	private String _ipAddress;
	private String _eventType;
	private String _additionalInfo;
	private AmfRegistrationLog _escapedModel;
}